@model TrainMonitor.web.Models.Home.HomePageViewModel
@{
    ViewData["Title"] = "Home Page";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-4">
    <h1 class="mb-4 text-center">🚆 Train Monitor Dashboard</h1>

    <div class="row g-3" id="trainsContainer">
        @if (Model.TrainsList != null && Model.TrainsList.Any())
        {
            foreach (var t in Model.TrainsList)
            {
                <div class="col-md-4" id="train-@t.Id">
                    <div class="card p-3 border-start border-5 
                        @(t.DelayMinutes == 0 ? "border-success"
                        : t.DelayMinutes < 10 ? "border-warning"
                        : "border-danger")">

                        <!-- 🔹 Secțiunea generală -->
                        <div class="mb-2">
                            <h5>@t.Name (@t.TrainNumber)</h5>
                            <p class="text-muted mb-1">
                                <strong>Route:</strong> @t.Name
                            </p>
                        </div>

                        <hr/>

                        <div class="live-section mb-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="train-delay fw-bold text-@(t.DelayMinutes == 0 ? "success" : t.DelayMinutes < 10 ? "warning" : "danger")">
                                    @(t.DelayMinutes == 0 ? "ON TIME" : $"{t.DelayMinutes} min delay")
                                </span>
                            </div>

                            <p class="train-nextStop mb-1">
                                <strong>Next stop:</strong> @t.NextStop
                            </p>

                            <p class="train-lastUpdated mb-2">
                                <small>Last updated: @t.LastUpdated.ToString("HH:mm:ss")</small>
                            </p>

                            @if (t.DelayMinutes > 0)
                            {
                                <button class="btn btn-outline-primary btn-sm w-100 feedback-btn"
                                        data-train="@t.TrainNumber"
                                        data-bs-toggle="modal"
                                        data-bs-target="#feedbackModal">
                                    💬 Give Feedback
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center text-muted">
                <p>No trains available at the moment.</p>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content rounded-3 shadow-lg">
            <div class="modal-header">
                <h5 class="modal-title" id="feedbackLabel">Train Delay Feedback</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" action="/Home/Feedback">
                    <input type="hidden" asp-for="TrainNumber" />
                    <div class="mb-3">
                        <label asp-for="Username" class="form-label"></label>
                        <input asp-for="Username" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label asp-for="ReasonForDelay" class="form-label"></label>
                        <input asp-for="ReasonForDelay" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label asp-for="AditionalMessage" class="form-label"></label>
                        <textarea asp-for="AditionalMessage" class="form-control"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">📨 Submit Feedback</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

<script>
const connection = new signalR.HubConnectionBuilder()
    .withUrl("/trainHub")
    .build();

connection.on("ReceiveTrainUpdate", (trains) => {
    trains.forEach(train => {
        const cardWrapper = document.getElementById(`train-${train.id}`);
        if (cardWrapper) {
            const delaySpan = cardWrapper.querySelector(".train-delay");
            const nextStopP = cardWrapper.querySelector(".train-nextStop");
            const lastUpdatedP = cardWrapper.querySelector(".train-lastUpdated");
            const cardDiv = cardWrapper.querySelector(".card");

            if (delaySpan) {
                delaySpan.textContent = train.delayMinutes === 0 ? "ON TIME" : `${train.delayMinutes} min delay`;
                delaySpan.className = `train-delay fw-bold text-${train.delayMinutes === 0 ? "success" : train.delayMinutes < 10 ? "warning" : "danger"}`;
            }

            if (nextStopP) nextStopP.innerHTML = `<strong>Next stop:</strong> ${train.nextStop}`;
            if (lastUpdatedP) lastUpdatedP.innerHTML = `<small>Last updated: ${new Date(train.lastUpdated).toLocaleTimeString()}</small>`;
            if (cardDiv) cardDiv.className = `card p-3 border-start border-5 ${train.delayMinutes === 0 ? "border-success" : train.delayMinutes < 10 ? "border-warning" : "border-danger"}`;

            let btn = cardWrapper.querySelector(".feedback-btn");
            if (train.delayMinutes > 0 && !btn) {
                const liveSection = cardWrapper.querySelector(".live-section");
                const button = document.createElement("button");
                button.className = "btn btn-outline-primary btn-sm w-100 feedback-btn";
                button.dataset.train = train.trainNumber;
                button.dataset.bsToggle = "modal";
                button.dataset.bsTarget = "#feedbackModal";
                button.textContent = "💬 Give Feedback";
                liveSection.appendChild(button);
                attachFeedbackButton(button);
            } else if (train.delayMinutes === 0 && btn) {
                btn.remove();
            }
        }
    });
});

connection.start()
    .then(() => console.log("✅ Connected to SignalR"))
    .catch(err => console.error(err));

function attachFeedbackButton(btn) {
    btn.addEventListener("click", () => {
        document.getElementById("TrainNumber").value = parseInt(btn.dataset.train);
    });
}

document.querySelectorAll(".feedback-btn").forEach(attachFeedbackButton);

document.getElementById("feedbackForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);

    const response = await fetch(form.action, {
        method: "POST",
        body: formData
    });

    if (response.ok) {
        alert("Feedback sent successfully!");
        form.reset();
        const modal = bootstrap.Modal.getInstance(document.getElementById("feedbackModal"));
        modal.hide();
    } else {
        alert("Failed to send feedback.");
    }
});
</script>
